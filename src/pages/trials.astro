---
import BaseLayout from "../layouts/base.astro";
import Icon from "../components/Icon.astro";
import "../../node_modules/simple-datatables/dist/style.css";
import "./trials-datatable.css"; // overrides for simple-datatables styles

import { records } from "../dataset.mjs";

const tags = {};
records.forEach((record) =>
  record.Tags?.split("; ").forEach((tag) => {
    if (!tag) return;
    if (tag in tags) {
      tags[tag].push(record.ID);
    } else {
      tags[tag] = [record.ID];
    }
  }),
);

const pCharges = {};
records.forEach((record) =>
  record["Primary charge"]?.split("; ").forEach((pCharge) => {
    pCharge = pCharge || "[none]";
    if (pCharge in pCharges) {
      pCharges[pCharge].push(record.ID);
    } else {
      pCharges[pCharge] = [record.ID];
    }
  }),
);

const sCharges = {};
records.forEach((record) =>
  record["Secondary charge(s)"]?.split("; ").forEach((sCharge) => {
    sCharge = sCharge || "[none]";
    if (sCharge in sCharges) {
      sCharges[sCharge].push(record.ID);
    } else {
      sCharges[sCharge] = [record.ID];
    }
  }),
);
---

<BaseLayout bodyClass="trials">
  <!-- anything bundled by Astro is injected into the head, regardless of whether
       it's in <noscript/> or not, so we're using a static external stylesheet here :( -->
  <noscript><link rel="stylesheet" href="/nojs.css" /></noscript>

  <section class="filter tags">
    <header>Top 10 Tags ({Object.keys(tags).length} total)</header>
    <div>
      {Object.entries(tags)
        .sort(([, a], [, b]) => b.length - a.length)
        .slice(0, 10)
        .map(([tag, ids]) => (
          <span class="pill" data-tag={tag} data-records={ids.join(",")}>
            {tag} ({ids.length})
          </span>
        ))}
    </div>
  </section>

  <section class="filter primary-charges">
    <header>
      Top 10 Primary Charges ({Object.keys(pCharges).length} total)
    </header>
    <div>
      {Object.entries(pCharges)
        .sort(([, a], [, b]) => b.length - a.length)
        .slice(0, 10)
        .map(([pCharge, ids]) => (
          <span
            class="pill"
            data-primary-charge={pCharge}
            data-records={ids.join(",")}
          >
            {pCharge} ({ids.length})
          </span>
        ))}
    </div>
  </section>

  <section class="filter secondary-charges">
    <header>
      Top 10 secondary Charges ({Object.keys(sCharges).length} total)
    </header>
    <div>
      {Object.entries(sCharges)
        .sort(([, a], [, b]) => b.length - a.length)
        .slice(0, 10)
        .map(([sCharge, ids]) => (
          <span
            class="pill"
            data-secondary-charge={sCharge}
            data-records={ids.join(",")}
          >
            {sCharge} ({ids.length})
          </span>
        ))}
    </div>
  </section>

  <table id="trials" style="display:none;">
    <span id="prev"><Icon name="caret-left" /></span>
    <span id="next"><Icon name="caret-right" /></span>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name on Document</th>
        <th>Date (Y/M/D)</th>
        <th>Trial Location</th>
      </tr>
    </thead>
    <tbody>
      {records.map((record) => (
        <tr
          data-row-id={record.ID}
          data-tags={record.Tags?.split("; ").join("|")}
        >
          <td>
            <a href={`${Astro.site.pathname}trials/${record.ID}/`}>
              {record.ID}
            </a>
          </td>
          <td>{record["Name on Document"]}</td>
          <td>{record["Date (Y/M/D)"]}</td>
          <td>{record["Trial Location"]}</td>
        </tr>
      ))}
    </tbody>
  </table>

  {() => {
    if (import.meta.env.DEV) {
      return (
        <details>
          <summary style="box-sizing: content-box;">tags</summary>
          <pre>{JSON.stringify(tags, null, 2)}</pre>
        </details>

        <details>
          <summary style="box-sizing: content-box;">primary charges</summary>
          <pre>{JSON.stringify(pCharges, null, 2)}</pre>
        </details>

        <details>
          <summary style="box-sizing: content-box;">secondary charges</summary>
          <pre>{JSON.stringify(sCharges, null, 2)}</pre>
        </details>
      );
    }
  }}

  <script type="module" hoist>await import("./trials.mjs");</script>
</BaseLayout>

<style>
  #trials {
    transition: opacity 500ms ease;
  }

  tbody tr:hover {
    background-color: var(--palette-0);
  }

  span#prev,
  span#next {
    display: none;
  }

  .filter {
    background-color: var(--palette-0);
    border-radius: var(--radius-2);
    padding: var(--size-4) var(--size-5);
  }

  .filter div {
    display: flex;
    flex-wrap: wrap;
    gap: var(--size-2);
  }
</style>
