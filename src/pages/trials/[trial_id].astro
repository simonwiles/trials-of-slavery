---
import BaseLayout from "../../layouts/base.astro";
import MetadataDl from "../../components/MetadataDl.astro";
import DocumentViewer from "../../components/DocumentViewer.astro";
import TrialPlaces from "../../components/TrialPlaces.astro";
import Icon from "../../components/Icon.astro";
import { records } from "../../dataset.mjs";

export async function getStaticPaths() {
  const paths = records.map((record, index, array) => ({
    params: { trial_id: record.ID },
    props: {
      record: record,
      prev: array[index - 1]?.ID,
      next: array[index + 1]?.ID,
    },
  }));

  return paths;
}

const { record, prev, next } = Astro.props;
---

<BaseLayout>
  <nav>
    <a href="#details">Details</a>
    <a href="#summary">Summary</a>
    <a href="#documents">Documents</a>
    {() => {
      if (record["trial_locations"].length) {
        return <a href="#places">Places</a>;
      }
    }}
    {prev ? (
      <a href={`${Astro.site.pathname}trials/${prev}/`}>
        <Icon name="caret-left" />
      </a>
    ) : (
      <a>
        <Icon name="caret-left" />
      </a>
    )}
    {next ? (
      <a href={`${Astro.site.pathname}trials/${next}/`}>
        <Icon name="caret-right" />
      </a>
    ) : (
      <a>
        <Icon name="caret-right" />
      </a>
    )}
  </nav>

  <MetadataDl {record} />

  <DocumentViewer {record} />

  {(record["trial_locations"].length) ? <TrialPlaces {record} /> : null}

  {() => {
    if (import.meta.env.DEV) {
      return (
        <details>
          <summary style="box-sizing: content-box;">debug</summary>
          <pre>{JSON.stringify(record, null, 2)}</pre>
        </details>
      );
    }
  }}
</BaseLayout>

<style>
  nav {
    align-self: flex-end;
    background: hsla(210deg 17% 98% / 0.8); /* --surface-1 / 0.8 */
    border-radius: var(--radius-2);
    display: flex;
    gap: var(--size-3);
    justify-content: flex-end;
    margin-right: var(--size-1);
    padding: var(--size-2);
    position: sticky;
    top: var(--size-1);
    width: fit-content;
    z-index: 2;

    a {
      background-color: var(--surface-3);
      border-radius: var(--radius-2);
      color: var(--text-1);
      padding: 4px 8px;
      text-decoration: none;

      &[href] {
        background-color: var(--palette-2);

        &:hover {
          background-color: var(--palette-4);

          :global(svg) {
            fill: var(--palette-8);
          }
        }
      }
    }
  }

  :global(section header) {
    color: var(--palette-8);
    font-size: var(--font-size-4);
    font-weight: bold;
    margin-bottom: var(--size-2);
    text-transform: uppercase;
  }
</style>
