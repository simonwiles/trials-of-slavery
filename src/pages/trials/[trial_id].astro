---
import BaseLayout from "@layouts/base.astro";
import TrialSummary from "@components/TrialSummary.astro";
import DocumentViewer from "@components/DocumentViewer.astro";
import TrialPlaces from "@components/TrialPlaces.astro";
import MetadataPanel from "@components/MetadataPanel.astro";
import Icon from "@components/Icon.astro";
import { records } from "@dataset";

export async function getStaticPaths() {
  const paths = records.map((record, index, array) => ({
    params: { trial_id: record.ID },
    props: {
      record: record,
      // for each tag, count the occurrences of that tag across all records
      tags: Object.fromEntries(
        record.Tags.split("; ").map((tag) => [
          tag,
          records
            .map((record) => record.Tags.split("; "))
            .flat()
            .filter((_tag) => _tag === tag).length,
        ]),
      ),
      prev: array[index - 1]?.ID,
      next: array[index + 1]?.ID,
    },
  }));

  return paths;
}

const base = import.meta.env.BASE_URL;
const { record, tags, prev, next } = Astro.props;
const pageTitle = `${record["Date (Y/M/D)"].split("-")[0]} ${
  record["Name on Document"]
}`;
---

<BaseLayout>
  <nav>
    <div>
      <a href="#details">Details</a>
      <a href="#summary">Summary</a>
      <a href="#documents">Documents</a>
      {
        () => {
          if (record["trial_locations"].length) {
            return <a href="#places">Places</a>;
          }
        }
      }
    </div>
    <div>
      {
        prev ? (
          <a href={`${base}trials/${prev}/`}>
            <Icon name="caret-left" />
          </a>
        ) : (
          <a>
            <Icon name="caret-left" />
          </a>
        )
      }
      {
        next ? (
          <a href={`${base}trials/${next}/`}>
            <Icon name="caret-right" />
          </a>
        ) : (
          <a>
            <Icon name="caret-right" />
          </a>
        )
      }
    </div>
  </nav>

  <header><h2 class="page-heading">{pageTitle}</h2></header>

  <MetadataPanel {record} {tags} />

  <TrialSummary {record} />

  <DocumentViewer {record} />

  {record["trial_locations"].length ? <TrialPlaces record={record} /> : null}

  {
    () => {
      if (import.meta.env.DEV) {
        return (
          <details>
            <summary style="box-sizing: content-box;">debug</summary>
            <pre>{JSON.stringify(record, null, 2)}</pre>
            <pre>{JSON.stringify(tags, null, 2)}</pre>
          </details>
        );
      }
    }
  }
</BaseLayout>

<style>
  nav {
    align-self: center;
    background: hsla(210deg 17% 98% / 0.8); /* --surface-1 / 0.8 */
    border-radius: var(--radius-2);
    display: flex;
    flex-wrap: wrap;
    gap: var(--size-3);
    justify-content: center;
    margin-right: calc(var(--size-2) * -1);
    margin-top: var(--size-1);
    padding: var(--size-2);
    position: sticky;
    top: var(--size-1);
    width: fit-content;
    z-index: 2;

    div {
      display: flex;
      flex-wrap: wrap;
      gap: var(--size-3);
      justify-content: center;
    }

    a {
      background-color: var(--surface-3);
      border-radius: var(--radius-2);
      color: var(--text-1);
      padding: 4px 8px;
      text-decoration: none;

      &[href] {
        background-color: var(--palette-2);

        &:hover {
          background-color: var(--palette-4);

          :global(svg) {
            fill: var(--palette-8);
          }
        }
      }
    }
  }

  header {
    margin: var(--size-4) 0;
  }

  /* Styles for rendered markdown (from <TrialSummary/> and <DocumentViewer />) */
  :global(.md) {
    :global(p) {
      line-height: 1.8;
    }

    :global(p + p) {
      margin-top: var(--size-3);
    }

    :global(section.footnotes) {
      border-top: 1px solid var(--palette-9);
      padding-top: var(--size-3);
      margin-top: var(--size-5);
    }

    :global(section.footnotes p) {
      font-size: var(--font-size-1);
    }

    :global(section.footnotes h2) {
      display: none;
    }

    :global(li[id]) {
      transition: background-color 0.2s ease-in-out;

      &.anchor-hovered,
      &:target {
        background-color: var(--palette-1);
        border-radius: var(--radius-2);
      }
    }

    :global(.glossary) {
      border-bottom: 2px dashed var(--palette-8);
      cursor: help;
      display: inline-block;
    }

    :global(.gloss) {
      background: var(--surface-1);
      border: 5px solid var(--palette-3);
      border-radius: var(--custom-border);
      box-shadow: 8px 8px 8px rgba(0, 0, 0, 0.7);
      font-family: var(--font-sans);
      font-size: var(--font-size-2);
      font-style: normal;
      max-width: 40%;
      opacity: 0;
      padding: var(--size-3) var(--size-4) var(--size-3);
      pointer-events: none;
      position: absolute;
      transition: opacity 300ms ease-in-out;

      :global(.header) {
        color: var(--palette-8);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
      }

      &.shown {
        opacity: 1;
        pointer-events: all;
      }
    }
  }

  /* lift the secondary nav up into the header area */
  @media (min-width: 1280px) {
    nav {
      align-self: flex-end;
      margin-top: -40px !important;
      justify-content: flex-end;
    }
  }
</style>
