---
import BaseLayout from "../../layouts/base.astro";
import "leaflet/dist/leaflet.css";
import { records } from "../../dataset.mjs";

export async function getStaticPaths() {
  const paths = records.map((record, index, array) => ({
    params: { trial_id: record.ID },
    props: {
      record: record,
      prev: array[index - 1]?.ID,
      next: array[index + 1]?.ID,
    },
  }));

  return paths;
}

// const { trial_id } = Astro.request.params;
const { record, prev, next } = Astro.props;
---

<BaseLayout>
  <nav>
    {prev ? <a href={"/trials/" + prev}>⮜</a> : <a>⮜</a>}
    {next ? <a href={"/trials/" + next}>⮞</a> : <a>⮞</a>}
  </nav>
  <dl>
    {Object.entries(record)
        .filter(([key, value]) => typeof value === 'string')
        .map(([key, value]) => (
          <dt>{key}</dt><dd>{value}</dd>
        ))}
    {() => {
      if (record["trial_locations"].length) {
        return (
          <dt>Locations:</dt>
          <dd data-locations={JSON.stringify(record["trial_locations"])}>{
            record["trial_locations"].map(
              (location) =>
              <p>{location["Location"]} { location["Relation to case"] ? ` -- ${location["Relation to case"]}`: '' }</p>
            )
          }</dd>
        );
      }
    }}
  </dl>

  {() => {
    if (record["trial_locations"].length) {
      return (
        <div id="map"></div>
        <script type="module" src={Astro.resolve("./trial-maps.mjs")}></script>
      );
    }
  }}

  {() => {
    if (import.meta.env.DEV) {
      return (
        <details>
          <summary style="box-sizing: content-box;">debug</summary>
          <pre>{JSON.stringify(record, null, 2)}</pre>
        </details>
      );
    }
  }}
</BaseLayout>

<style>
  nav {
    display: flex;
    gap: var(--size-2);
    justify-content: flex-end;
    text-align: right;

    a {
      background-color: var(--surface-3);
      border-radius: var(--radius-2);
      border: 1px solid transparent;
      color: var(--text-1);
      float: left;
      margin-left: 2px;
      padding: 6px 12px;
      position: relative;
      text-decoration: none;

      &[href] {
        background-color: var(--indigo-2);

        &:hover {
          background-color: var(--indigo-4);
        }
      }
    }
  }

  dl {
    border-radius: var(--radius-2);
    display: flex;
    flex-flow: column wrap;
    overflow: hidden;
  }

  dt,
  dd {
    padding: var(--size-1) var(--size-4);
    margin: 0;
  }

  dt {
    flex-basis: 25%;
    background: var(--indigo-2);
    text-align: left;

    &::selection {
      background-color: var(--indigo-0);
    }
  }

  dd {
    flex-basis: 70%;
    flex-grow: 1;
    margin-bottom: var(--size-2);
  }

  #map {
    height: 400px;
    border-radius: var(--radius-2);

    :global(*) {
      /* wind off settings from Open Props normalize */
      max-inline-size: revert;
      font-family: var(--font-serif);
    }

    :global(.leaflet-popup-content header) {
      font-size: var(--font-size-3);
      font-weight: bold;
    }

    :global(.leaflet-popup-content p) {
      font-size: var(--font-size-1);
      margin: 0;
    }

    :global(a.leaflet-popup-close-button) {
      padding: 10px 24px 0 0;
    }
  }

  /* Not sure why postcss-custom-media doesn't seem to be working here... */
  /* @media (--md-n-above) { */
  @media (min-width: 768px) {
    dl {
      flex-flow: row wrap;
    }

    dt,
    dd {
      padding: var(--size-2) var(--size-4);
    }

    dt ~ dt,
    dd ~ dd {
      border-top: 1px solid var(--indigo-9);
    }

    dt {
      text-align: right;
    }

    dd {
      margin-bottom: 0;
    }
  }
</style>
