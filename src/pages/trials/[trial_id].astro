---
import BaseLayout from "../../layouts/base.astro";
import "leaflet/dist/leaflet.css";
import { records } from "../../dataset.mjs";

export async function getStaticPaths() {
  const paths = records.map((record) => ({
    params: { trial_id: record.ID },
    props: { record: record },
  }));

  return paths;
}

// const { trial_id } = Astro.request.params;
const { record } = Astro.props;
---

<BaseLayout>
  <dl>
    {Object.entries(record)
        .filter(([key, value]) => typeof value === 'string')
        .map(([key, value]) => (
          <dt>{key}</dt><dd>{value}</dd>
        ))}
    {() => {
      if (record["trial_locations"].length) {
        return (
          <dt>Locations:</dt>
          <dd data-locations={JSON.stringify(record["trial_locations"])}>{
            record["trial_locations"].map(
              (location) =>
              <p>{location["Location"]} { location["Relation to case"] ? ` -- ${location["Relation to case"]}`: '' }</p>
            )
          }</dd>
        );
      }
    }}
  </dl>

  <div id="map"></div>

  {() => {
    if (import.meta.env.DEV) {
      return (
        <details>
          <summary style="box-sizing: content-box;">debug</summary>
          <pre>{JSON.stringify(record, null, 2)}</pre>
        </details>
      );
    }
  }}

  <script type="module" hoist>
    import * as L from "leaflet/dist/leaflet-src.esm.js";
    const locations = JSON.parse(
      document.querySelector("[data-locations]").dataset.locations,
    );
    const map = L.map("map").fitBounds([
      locations.map((location) => [
        location["Latitude"],
        location["Longitude"],
      ]),
    ]);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);
    locations.forEach((location) => {
      L.marker([location["Latitude"], location["Longitude"]]).addTo(map);
    });
  </script>
</BaseLayout>

<style>
  dl {
    display: flex;
    flex-flow: column wrap;
  }

  dt,
  dd {
    padding: var(--size-1) var(--size-4);
    margin: 0;
  }

  dt {
    flex-basis: 25%;
    background: var(--indigo-2);
    text-align: left;
  }

  dd {
    flex-basis: 70%;
    flex-grow: 1;
    margin-bottom: var(--size-2);
  }

  #map {
    height: 400px;
  }

  /* Not sure why postcss-custom-media doesn't seem to be working here... */
  /* @media (--md-n-above) { */
  @media (min-width: 768px) {
    dl {
      flex-flow: row wrap;
    }

    dt,
    dd {
      padding: var(--size-2) var(--size-4);
    }

    dt ~ dt,
    dd ~ dd {
      border-top: 1px solid var(--indigo-9);
    }

    dt {
      text-align: right;
    }

    dd {
      margin-bottom: none;
    }
  }
</style>
