---
import { documentMdToHtml } from "../../lib/markdown-parsing.mjs";

import Icon from "./Icon.astro";

const { record } = Astro.props;
---

<section class="documents">
  <header>
    {Object.entries(record.files.documents).map(async ([citation], idx) => {
      return (
        <span data-doc={citation} class={idx === 0 ? "active" : ""}>
          <Icon name="document" />
          {citation}
        </span>
      )
    })}
  </header>

  {Object.entries(record.files.documents).map(
    async ([citation, { DU, EN }], idx) => {
      const dutch = await documentMdToHtml(DU, "dutch")
      const translation = await documentMdToHtml(EN, "translation")

      return (
        <section
          data-citation={citation}
          class={`md document${idx === 0 ? " shown" : ""}`}
        >
          <header>
            <span data-lang="translation" class="active">
              Translation
            </span>
            <span data-lang="dutch">Dutch</span>
          </header>
          <div data-doc-lang="translation" class="shown">
            <div set:html={translation} />
          </div>
          <div data-doc-lang="dutch">
            <div set:html={dutch} />
          </div>
        </section>
      )
    },
  )}
</section>

<script>
  const initDocumentTabs = () => {
    const panels = document.querySelectorAll(".document");
    const tabs: NodeListOf<HTMLElement> =
      document.querySelectorAll("[data-doc]");

    tabs.forEach((tab: HTMLElement) => {
      tab.addEventListener("click", () => {
        tabs.forEach((_tab) => _tab.classList.remove("active"));
        panels.forEach((panel) => panel.classList.remove("shown"));
        tab.classList.add("active");
        [...panels]
          .find(
            (panel: HTMLElement) => panel.dataset.citation === tab.dataset.doc,
          )
          .classList.add("shown");
      });
    });
  };

  const initTranslationTabs = () => {
    document.querySelectorAll("section[data-citation]").forEach((section) => {
      const tabs = section.querySelectorAll("[data-lang]");
      const panels = section.querySelectorAll("[data-doc-lang]");

      tabs.forEach((tab: HTMLElement) => {
        tab.addEventListener("click", () => {
          tabs.forEach((_tab) => _tab.classList.remove("active"));
          panels.forEach((panel) => panel.classList.remove("shown"));
          tab.classList.add("active");
          [...panels]
            .find(
              (panel: HTMLElement) =>
                panel.dataset.docLang === tab.dataset.lang,
            )
            .classList.add("shown");
        });
      });
    });
  };

  initDocumentTabs();
  initTranslationTabs();

  document
    .querySelectorAll("a[data-footnote-ref]")
    .forEach((anchor: HTMLAnchorElement) => {
      const id = anchor.href.split("#")[1];
      anchor.addEventListener("mouseover", () => {
        document.querySelector(`li#${id}`).classList.add("anchor-hovered");
      });
      anchor.addEventListener("mouseout", () => {
        document.querySelector(`li#${id}`).classList.remove("anchor-hovered");
      });
    });
</script>

<script type="module" hoist>
  await import("../glossary.mjs");
</script>

<style>
  .documents > header {
    display: flex;
    flex-direction: column;

    span:not(.active) {
      opacity: 0.5;
      cursor: pointer;
    }
  }

  .document {
    background-color: var(--palette-0);
    background-image: url("/paper.png");
    background-repeat: repeat;
    border: 5px solid var(--palette-3);
    border-radius: var(--custom-border);
    padding: var(--size-5) var(--size-10);

    &:not(.shown) {
      display: none;
    }
  }

  .document > div:not(.shown) {
    display: none;
  }

  .document header {
    align-items: center;
    display: flex;
    justify-content: space-evenly;
    margin-bottom: var(--size-7);

    span {
      cursor: pointer;
      opacity: 0.5;

      &:hover {
        opacity: 1;
      }
    }

    span.active {
      border-bottom: 2px solid var(--palette-8);
      cursor: default;
      opacity: 1;
    }
  }

  .document :global(p) {
    font-family: var(--font-serif);
    font-size: var(--font-size-3);
  }
</style>
