---
import { documentMdToHtml } from "@lib/markdown-parsing.mjs";

import Icon from "@components/Icon.astro";

const { record } = Astro.props;
---

<section class="documents" id="documents">
  {
    Object.entries(record.files.documents).map(
      async ([citation, { DU, EN }], idx) => {
        const dutch = await documentMdToHtml(DU, `d${idx}-dutch`);
        const translation = await documentMdToHtml(EN, `d${idx}-translation`);
        return (
          <details>
            <summary>
              <Icon name="file-horizontal" />
              {citation}
            </summary>
            <section
              id={citation}
              class={`md document${idx === 0 ? " shown" : ""}`}
            >
              <header>
                <span data-lang="translation" class="active">
                  Translation
                </span>
                <span data-lang="dutch">Dutch</span>
              </header>
              <div data-doc-lang="translation" class="shown">
                <div set:html={translation} />
              </div>
              <div data-doc-lang="dutch">
                <div set:html={dutch} />
              </div>
            </section>
          </details>
        );
      },
    )
  }
</section>

<script>
  const initTranslationTabs = () => {
    document.querySelectorAll(".document").forEach((section) => {
      const tabs = section.querySelectorAll("[data-lang]");
      const panels = section.querySelectorAll("[data-doc-lang]");

      tabs.forEach((tab: HTMLElement) => {
        tab.addEventListener("click", () => {
          tabs.forEach((_tab) => _tab.classList.remove("active"));
          panels.forEach((panel) => panel.classList.remove("shown"));
          tab.classList.add("active");
          [...panels]
            .find(
              (panel: HTMLElement) =>
                panel.dataset.docLang === tab.dataset.lang,
            )
            .classList.add("shown");
        });
      });
    });
  };
  initTranslationTabs();

  import { AnimatedDetails } from "@scripts/animated-details.js";
  document.querySelectorAll(".documents details").forEach((el) => {
    new AnimatedDetails(el, { contentSelector: ".document" });
  });
</script>

<script src="@scripts/glossary.mjs"></script>

<style>
  details {
    background-color: var(--palette-0);
    background-image: url("../img/paper.png");
    background-repeat: repeat;
    border: 5px solid var(--palette-3);
    border-radius: var(--custom-border);
    padding: var(--size-5) var(--size-8);

    & + details {
      margin-top: 2em;
    }
  }

  details[open] summary {
    border-bottom: 4px double var(--palette-4);
    padding-bottom: var(--size-4);
  }

  summary {
    background: none;
    color: var(--palette-8);
    display: block;
    font-size: var(--font-size-4);
    font-weight: bold;
    margin-left: 0;
    margin: 0;
    padding: 0 0 0 3rem;
    text-indent: calc(-3rem - 0.5ch);
    text-transform: uppercase;

    :global(svg) {
      height: 3rem;
      width: 3rem;
    }
  }

  summary::-webkit-details-marker {
    display: none;
  }

  .document {
    margin-top: var(--size-8);
    scroll-margin-top: calc(var(--size-10) * 3);

    & > div:not(.shown) {
      display: none;
    }
  }

  .document header {
    align-items: center;
    display: flex;
    justify-content: space-evenly;
    margin-bottom: var(--size-7);

    span {
      cursor: pointer;
      opacity: 0.5;

      &:hover {
        opacity: 1;
      }
    }

    span.active {
      border-bottom: 2px solid var(--palette-8);
      cursor: default;
      opacity: 1;
    }
  }

  .document :global(p) {
    font-family: var(--font-serif);
    font-size: var(--font-size-3);
  }
</style>
