---
const { record, sectionId = "places", title = "Places" } = Astro.props;
---

<section id={sectionId}>
  <header>{title}</header>
  <ul>
    {record["trial_locations"].map((location) => (
      <li data-location={JSON.stringify(location)}>
        {location["Location"]}{" "}
        {location["Relation to case"]
          ? ` -- ${location["Relation to case"]}`
          : ""}
      </li>
    ))}
  </ul>
  <div id="map"></div>
</section>

<script>
  import * as L from "leaflet/dist/leaflet-src.esm.js";

  const svgTemplate = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" class="marker">
      <path class="shadow" d="M16 32s1.427-9.585 3.761-12.025c4.595-4.805 8.685-.99 8.685-.99s4.044 3.964-.526 8.743C25.514 30.245 16 32 16 32z"/>
      <path class="pin" d="M15.938 32S6 17.938 6 11.938C6 .125 15.938 0 15.938 0S26 .125 26 11.875C26 18.062 15.938 32 15.938 32zM16 6a4 4 0 100 8 4 4 0 000-8z"/>
    </svg>`;

  const icon = L.divIcon({
    className: "marker",
    html: svgTemplate,
    iconSize: [40, 40],
    iconAnchor: [20, 40],
    popupAnchor: [0, -45],
  });

  const locations = [...document.querySelectorAll("[data-location]")].map(
    (el) => JSON.parse(el.dataset.location),
  );

  if (locations) {
    const map = L.map("map").fitBounds(
      [
        locations.map((location) => [
          location["Latitude"],
          location["Longitude"],
        ]),
      ],
      { maxZoom: 8 },
    );

    L.tileLayer(
      "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png",
      {
        attribution:
          'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      },
    ).addTo(map);

    locations.forEach((location) => {
      const marker = L.marker([location["Latitude"], location["Longitude"]], {
        icon: icon,
      });
      marker.addTo(map).bindPopup(
        `<header>${location["Location"]}</header>
          <p>${location["Relation to case"]}</p>`,
      );
    });
  }
</script>

<style>
  #map {
    height: 400px;
    border-radius: var(--radius-2);
  }

  :global(svg.marker) {
    height: 100%;
    width: 100%;
  }

  :global(path.pin) {
    fill: var(--palette-7);
    stroke: white;
  }

  :global(path.shadow) {
    fill: initial;
    fill-opacity: 0.25;
    stroke: initial;
  }
</style><style is:global>
  @import "leaflet/dist/leaflet.css";
  @import "../styles/leaflet-overrides.css";
</style>
