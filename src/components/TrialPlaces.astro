---
import Icon from "@components/Icon.astro";

const { record, sectionId = "places", title = "Places" } = Astro.props;
const locations = record["trial_locations"].map((location) => ({
  name: location.Location,
  desc: location["Relation to case"],
  lat: location.Latitude,
  long: location.Longitude,
}));
---

<section id={sectionId}>
  <header>{title}</header>
  <div class="location-rows">
    {locations.map((location) => (
      <div class="location-row" data-location={JSON.stringify(location)}>
        <Icon name="marker" className="marker" />
        <span class="location-name">{location.name}</span>
        <span class="location-desc">{location.desc}</span>
      </div>
    ))}
  </div>
  <div id="map"></div>
</section>

<script>
  import * as L from "leaflet/dist/leaflet-src.esm.js";
  import { initMap, icon } from "@local/leaflet-shared.js";

  const locations = document.querySelectorAll("[data-location]");
  const locationData = [...locations].map((location) =>
    JSON.parse(location.dataset.location),
  );

  if (locationData) {
    const setInitialView = (map) => {
      map.fitBounds(
        [locationData.map((location) => [location.lat, location.long])],
        { maxZoom: 8 },
      );
    };

    const map = initMap("map", setInitialView);

    locations.forEach((location) => {
      const { lat, long, name, desc } = JSON.parse(location.dataset.location);
      const marker = L.marker([lat, long], { icon: icon });
      marker.addTo(map).bindPopup(`<header>${name}</header><p>${desc}</p>`);
      location.classList.add("clickable");
      location.addEventListener("click", () => map.setView([lat, long]));
      location.addEventListener("mouseover", () =>
        L.DomUtil.addClass(marker._icon, "highlight"),
      );
      location.addEventListener("mouseout", () =>
        L.DomUtil.removeClass(marker._icon, "highlight"),
      );
    });
  }
</script>

<style>
  #map {
    height: 400px;
    border-radius: var(--radius-2);
  }

  .location-rows {
    display: grid;
    gap: var(--size-3);
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    margin-bottom: var(--size-3);

    .marker {
      grid-row: span 2;
      height: var(--size-9);
      width: var(--size-9);
    }
  }

  .location-row {
    display: grid;
    gap: 0 var(--size-3);
    grid-template-columns: 50px 1fr;
    grid-template-rows: auto 1fr;
    grid-template-areas:
      "icon name"
      "icon desc";
  }

  .clickable {
    cursor: pointer;
  }

  .location-name {
    color: var(--palette-7);
    font-size: var(--font-size-3);
    font-weight: bold;
    padding-top: var(--size-2);
  }

  :global(.highlight path.pin, .clickable:hover path.pin) {
    fill: var(--alt) !important;
    transform: translateY(-5px);
  }

  :global(.highlight path.shadow, .clickable:hover path.shadow) {
    transform: translate(5px, -5px);
  }
</style><style is:global>
  @import "leaflet/dist/leaflet.css";
  @import "../styles/leaflet-overrides.css";
</style>
